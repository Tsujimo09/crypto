datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  totalAmount   Int?
  jpyAmount     Int?
  hisFlg        Boolean        @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  CryptoAssets  CryptoAssets[]
  AssetHistory  AssetHistory[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

//保有通貨
model CryptoAssets {
  id            String   @id @default(cuid())
  userId        String
  coinName      String
  coinAmount    Decimal  @db.Decimal(18, 8)
  purchasePrice Int?
  purchasedAt   DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//資産金額履歴
model AssetHistory {
  id            String   @id @default(cuid())
  userId        String
  Asset         Decimal  @db.Decimal(18, 8)
  Historydate   DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}